{"version":3,"sources":["helpers/getToken.js","FetchCard.js","App.js","index.js"],"names":["getToken","url","a","fetch","response","json","token","FetchCard","props","useState","name","description","img","object","setObject","nftContract","typeNFT","setTypeNFT","internaMetadata","idToken","contract","internalMetadata","metadata","console","log","tipo","parseInt","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","Contract","NFT","abi","tokenURI","tokenUri","updateToken","mensajeError","message","Swal","fire","title","text","icon","confirmButtonText","then","newToken","image","useEffect","fetchToken","className","_hex","style","maxWidth","src","App","balance","setBalance","network","setNetwork","commonPrice","setCommonPrice","misticPrice","setMisticPrice","offSetY","setOffSetY","handleScroll","scrollY","networkData","chainId","chainName","rpcUrls","nativeCurrency","symbol","decimals","blockExplorerUrls","request","method","params","getNetwork","init","accounts","accountConnection","subint","substr","subfinal","document","querySelector","innerHTML","checkingNFTs","classList","remove","getPriceOfNFTs","priceNFTs","tokenPriceComun","priceCommonBigNumber","tokenPriceMistic","priceMisticBigNumber","push","utils","formatEther","toString","account","getBunnysOfOwner","contractUserBalance","length","on","buytokens","type","createBunny","value","transaction","showConfirmButton","imageUrl","imageWidth","imageHeight","imageAlt","wait","html","hash","result","isConfirmed","isDenied","data","addEventListener","removeEventListener","checkingNetwork","changeAccounts","showCancelButton","open","addNetwork","transform","id","onClick","map","autoPlay","muted","loop","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.cacd0073.chunk.js","sourcesContent":["const getToken = async (url) => {\r\n\r\n   //const userId = Math.floor(Math.random() * 4 ) + 1;\r\n\r\nconst response = await fetch(url);\r\nconst token = await response.json();\r\nreturn token;\r\n\r\n}\r\n\r\nexport default getToken;","import React from \"react\";\r\nimport { useState, useEffect, useCallback } from \"react\";\r\nimport Swal from 'sweetalert2';\r\nimport { ethers } from 'ethers';\r\nimport NFT from './artifacts/contracts/ArcadeFantasy.sol/ArcadeFantasy.json';\r\nimport getToken from './helpers/getToken';\r\n\r\nconst FetchCard = (props) => { \r\n\r\n    const [object, setObject] = useState({\r\n        name: 'name',\r\n        description: 'description',\r\n        img: 'image'\r\n      });\r\n    const nftContract = \"0x33600cd8d01F360E5A69316c22E7D7E860D7F8cF\"; // mumbai conejos\r\n    const [typeNFT, setTypeNFT] = useState(0);\r\n\r\n      async function internaMetadata(idToken, contract)  {\r\n        const metadata = await contract.internalMetadata(idToken);\r\n        console.log('metadata ', metadata);\r\n        const tipo = parseInt(metadata.tipo);\r\n        setTypeNFT(tipo);\r\n\r\n      }\r\n      // funcion para capturar la URI de un NFT\r\n      async function fetchToken(idToken)  {\r\n\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const contract = new ethers.Contract(nftContract, NFT.abi, signer);\r\n          internaMetadata(idToken, contract);\r\n          try {\r\n\r\n            const tokenUri = await contract.tokenURI(idToken);\r\n             updateToken(`${tokenUri}`);\r\n            console.log('la tokenURI ', tokenUri);\r\n          } catch (err) {\r\n            let mensajeError = err.message;\r\n            Swal.fire({\r\n              title: 'Fallo acceso a metadata',\r\n              text: `${mensajeError}`,\r\n              icon: 'error',\r\n              confirmButtonText: 'Cerrar'\r\n            })\r\n            console.log(\"Error: \", err)\r\n          }\r\n          \r\n   \r\n  }\r\n\r\n    const updateToken = async (url) => {\r\n       await getToken(url) \r\n            .then(\r\n                (newToken) => {\r\n                    setObject(\r\n                        {\r\n                          name: newToken.name,\r\n                          description: newToken.description,\r\n                          img: newToken.image\r\n                        });\r\n                ;}\r\n            )\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchToken(props.idToken);\r\n    }, []);\r\n\r\n    return (\r\n\r\n        <div key={object.name} className=\"col-lg-4 col-md-6 col-sm-12 text-center text-lg-start py-2\">\r\n                  <small>{parseInt(props.idToken._hex, 16) }</small> \r\n                  {typeNFT === 1 && <h3 className=\"card-title mistic\">MISTIC BUNNY!!</h3>}\r\n            <div className=\"card mb-3 transparent\" style={{maxWidth: \"750px\"}}>\r\n                <div className=\"row g-0\">\r\n                    <div className=\"col-md-6\">\r\n                    <img src={`${object.img}`} className=\"img-fluid rounded-start\"/>\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                        <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{object.name}</h5>\r\n                        <p className=\"card-text\">{object.description}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default FetchCard","import React from \"react\";\r\nimport { useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport Swal from 'sweetalert2';\r\nimport VideoPlayer from \"react-background-video-player\";\r\nimport { ethers } from 'ethers';\r\nimport NFT from './artifacts/contracts/ArcadeFantasy.sol/ArcadeFantasy.json';\r\nimport FetchCard from './FetchCard';\r\n\r\n\r\n\r\nfunction App() {\r\n \r\n  const MUMBAI = 'maticmum';\r\n  const nftContract = \"0x33600cd8d01F360E5A69316c22E7D7E860D7F8cF\"; // MUMBAI conejos\r\n  const [balance, setBalance] = useState([]);\r\n  const [network, setNetwork] = useState('no-net');\r\n  const [commonPrice, setCommonPrice] = useState('0');\r\n  const [misticPrice, setMisticPrice] = useState('0');\r\n\r\n // parallax effect\r\n  const [offSetY, setOffSetY] = useState(0);\r\n  const handleScroll = () => setOffSetY(window.scrollY);\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    }\r\n  }, [])\r\n\r\n  // se comprueba si se dispone de metamask, las funcion de chequeo de la red y cambio de cuenta\r\n  useEffect(function () {\r\n\r\n    if (typeof window.ethereum !== 'undefined') {\r\n    \r\n    checkingNetwork();\r\n    changeAccounts();\r\n  \r\n \r\n    } else {\r\n            Swal.fire({\r\n              title: \"No tiene metamask instalado\",\r\n              text: \"Cambie de navegador o puede instalárselo apretando al botón\",\r\n              showCancelButton: true,\r\n              confirmButtonText: \"Instalar\",\r\n              imageUrl: './img/metamask-transparent.png',\r\n              imageAlt: \"Instalar metamask\",\r\n            }).then((result) => {\r\n              /* Read more about isConfirmed, isDenied below */\r\n              if (result.isConfirmed) {\r\n                window.open('https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn', '_blank');  \r\n              }})};\r\n        \r\n      },[]);\r\n\r\n  // control de cambio de red\r\n  useEffect(function () {\r\n\r\n      // comprueba si se dispone la red adecuada.\r\n      if(network !== MUMBAI && network !== 'no-net' ){ \r\n          console.log('red red red ', network);\r\n          Swal.fire({\r\n            title: '¡Atencion!',\r\n            text: \"Estas en la red \"+network,\r\n            showCancelButton: true,\r\n            confirmButtonText: \"Instalar o cambiar a la red de pruebas de Polygon\",\r\n            imageUrl: 'https://criptoinforme.com/wp-content/uploads/2021/07/polygon-matic-card-image.jpg',\r\n            imageWidth: 300,\r\n            \r\n            imageAlt: 'Red de pruebas de Polygon',\r\n          }).then((result) => {\r\n            /* Read more about isConfirmed, isDenied below */\r\n            if (result.isConfirmed) {\r\n              addNetwork();\r\n            }\r\n          })\r\n        }\r\n      \r\n},[network]);\r\n\r\n  // funcion que cambia o instala la red de pruebas de BSC\r\n  async function addNetwork() {\r\n\r\n    let networkData = [{\r\n            chainId: \"0x13881\",\r\n            chainName: \"MOMBAI\",\r\n            rpcUrls: [\"https://matic-mumbai.chainstacklabs.com\"],\r\n            nativeCurrency: {\r\n              name: \"MATIC\",\r\n              symbol: \"MATIC\",\r\n              decimals: 18,\r\n            },\r\n            blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"],\r\n          },\r\n        ];\r\n\r\n      // agregar red o cambiar red\r\n      return window.ethereum.request({\r\n        method: \"wallet_addEthereumChain\",\r\n        params: networkData,\r\n      });\r\n  }\r\n\r\n    // captura de la blockchain de la metamask\r\n  async function checkingNetwork() {\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    // capturamos la red\r\n    const network = await provider.getNetwork();\r\n    //console.log('network', network.name);\r\n    setNetwork(network.name);\r\n  }\r\n\r\n  // funcion de conexion a la red.\r\n  async function init() {  \r\n            // captura la cuenta del usuario\r\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n            let accountConnection = accounts[0];\r\n            //console.log('esta conectado',accountConnection);\r\n            let subint = accountConnection.substr(0,4);\r\n            let subfinal = accountConnection.substr(-4,4);\r\n            document.querySelector('#intro').innerHTML ='Conectado con la cuenta: ' + subint + '...' + subfinal;\r\n            await checkingNFTs(accountConnection);\r\n            let element = document.querySelector(\"#formBuy\");\r\n            element.classList.remove(\"d-none\");\r\n            let element2 = document.querySelector(\"#formBuyMistic\");\r\n            element2.classList.remove(\"d-none\");\r\n                \r\n  }\r\n  \r\n  async function getPriceOfNFTs(contract) {\r\n    let priceNFTs = [];\r\n    try {\r\n      const priceCommonBigNumber = await contract.tokenPriceComun();\r\n      const priceMisticBigNumber = await contract.tokenPriceMistic();\r\n\r\n      setCommonPrice(priceCommonBigNumber);\r\n      setMisticPrice(priceMisticBigNumber);\r\n\r\n\r\n      priceNFTs.push(ethers.utils.formatEther(priceCommonBigNumber ).toString());\r\n      priceNFTs.push(ethers.utils.formatEther(priceMisticBigNumber).toString());\r\n\r\n      console.log('captura de precios', priceNFTs);\r\n  \r\n    } catch (err) {\r\n      console.log(\"Error: \", err)\r\n    }\r\n\r\n      console.log('common and mistic', priceNFTs[0],  priceNFTs[1]);\r\n      document.querySelector('#tokens').innerHTML = `Common: ${ priceNFTs[0]} Mistic: ${ priceNFTs[1]}`;        \r\n  } \r\n\r\n\r\n     // comprobacion de NFTs\r\n  async function checkingNFTs(account) { \r\n\r\n     const provider = await new ethers.providers.Web3Provider(window.ethereum);\r\n     const signer = provider.getSigner();\r\n     const contract = await new ethers.Contract(nftContract, NFT.abi, signer);\r\n     await getPriceOfNFTs(contract) \r\n     try {\r\n       const contractUserBalance = await contract.getBunnysOfOwner(account);\r\n        //console.log('contract user balance', contractUserBalance);\r\n          // comprobamos si el usuario tiene avatares.\r\n          if(contractUserBalance.length > 0) {\r\n            let newArray = contractUserBalance;\r\n            setBalance(newArray);\r\n              }\r\n\r\n        } catch (err) {\r\n          let mensajeError = err.message;\r\n          if (err.message === 'call revert exception (method=\"getBunnysOfOwner(address)\", errorArgs=null, errorName=null, errorSignature=null, reason=null, code=CALL_EXCEPTION, version=abi/5.5.0)') {\r\n            mensajeError =  'No ha cambiado a la red adecuada. Cambie de red y vuelva a recargar.';\r\n          } \r\n          \r\n          Swal.fire({\r\n            title: 'Ooops!',\r\n            text: `${mensajeError}`,\r\n            icon: 'error',\r\n            confirmButtonText: 'Cerrar'\r\n          })\r\n          //console.log(\"Error: \", err)\r\n        }\r\n\r\n  }\r\n\r\n\r\n    // funcion que detecta los cambios de cuenta\r\n    async function changeAccounts() {\r\n          \r\n      if (typeof window.ethereum !== 'undefined') {\r\n\r\n        window.ethereum.on(\"accountsChanged\", async function () {\r\n\r\n          await init();\r\n          \r\n        });\r\n\r\n      }\r\n    }\r\n    // funcion que abre el faucet para pedir BNBs de prueba\r\n    function faucet() {\r\n      window.open('https://faucet.polygon.technology', '_blank');  \r\n    }\r\n\r\n    async function buytokens(type) {\r\n\r\n          let transaction;\r\n          const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n          const signer = provider.getSigner();\r\n          const contract = new ethers.Contract(nftContract, NFT.abi, signer);\r\n          \r\n          try {\r\n            if(type === 0) {\r\n              transaction = await contract.createBunny({value: commonPrice});\r\n            } else {\r\n              transaction = await contract.createBunny({value: misticPrice});\r\n            }\r\n          \r\n            // event capture\r\n            // contract.on(\"TokenPurchase\", (a, b, c, d) => {\r\n            //   let amountBNB = ethers.utils.formatEther(c);\r\n            //  // console.log(`Comprador: ${b} precio: ${amountBNB} idtoken: ${d}`);\r\n            //   });\r\n\r\n            Swal.fire({\r\n              title: 'Procesando el pago',\r\n              text: 'Espere y no actualice el sitio',\r\n              showConfirmButton: false,\r\n              imageUrl: 'https://thumbs.gfycat.com/ConventionalOblongFairybluebird-size_restricted.gif',\r\n              imageWidth: 100,\r\n              imageHeight: 100,\r\n              imageAlt: 'Procesando el pago',\r\n  \r\n            });\r\n            \r\n            const Ok = await transaction.wait();\r\n            //console.log(`hash: ${transaction.hash}`);\r\n\r\n                  if(Ok) {\r\n                    Swal.fire({\r\n                    title:  `Se ha envíado un NFT a la cuenta ${account}`,\r\n                    html: `<a href=\"https://mumbai.polygonscan.com/tx/${transaction.hash}\" target=\"_blank\" rel=\"noreferrer\">Hash de la transaccion</a>`,\r\n                    icon: 'success',\r\n                    confirmButtonText: 'Cerrar'\r\n                  }).then((result) => {\r\n                    /* Read more about isConfirmed, isDenied below */\r\n                    if (result.isConfirmed) {\r\n                      init();\r\n                    } else if (result.isDenied) {\r\n                      init();\r\n                    }\r\n                  })\r\n          \r\n              };\r\n        \r\n      \r\n          }catch (err) {\r\n            let mensajeError = err.message;\r\n             \r\n            if (err.data) {\r\n  \r\n              if (err.data.message === 'execution reverted: Salemint must be active to buy Tokens') {\r\n                mensajeError =  'AUN NO SE PUEDE COMPRAR';\r\n              }  else if(err.data.message === 'execution reverted: value sent needs to be atleast sale price'){\r\n                mensajeError =  'Debe de pagar como mínimo el precio estipulado';\r\n              } else  if(err.data.message === 'execution reverted: There are no tokens to buy'){\r\n                mensajeError =  'Lo sentimos. Ya no hay mas NFTs a la venta. Informese en el canal de Telegram';\r\n              } else {\r\n                console.log('error: ',mensajeError);\r\n              }\r\n            }\r\n  \r\n            Swal.fire({\r\n              title: 'Ooops!',\r\n              text: `${mensajeError}`,\r\n              icon: 'error',\r\n              confirmButtonText: 'Cerrar'\r\n            })\r\n            console.log(\"Error: \", err)\r\n          }\r\n       \r\n    }\r\n\r\n  return (\r\n\r\n<div className=\"frame container\">\r\n        <div className=\"main row align-items-center g-lg-5 py-5\" style={{transform: `translateY(-${offSetY * 0.3}px)`}}>\r\n          <div className=\"my-4 col-lg-4 text-center text-lg-start\">\r\n            <form className=\"p-4 p-md-5 border rounded-3 transparent\">\r\n            <div className=\"form-floating mb-3\">\r\n            <h2 id=\"intro\" className=\"text-white\">No conectado</h2>\r\n            </div>\r\n            <hr className=\"my-4\"/>\r\n            <h3 id=\"tokens\" className=\"text-white\"></h3>\r\n            </form>\r\n          </div>\r\n          <div className=\"col-lg-4 text-center text-lg-start\">\r\n            <button id=\"btn-firma\"  onClick={() => init()} className=\"w-100 btn btn-lg btn-danger mb-4\" type=\"button\">Conectar Metamask</button>\r\n            <button id=\"faucet\"  onClick={() => faucet()} className=\"w-100 btn btn-lg btn-primary\" type=\"button\">Faucet de MATIC</button>\r\n            <button id=\"formBuy\" onClick={() => buytokens(0)} className=\"w-100 btn btn-lg btn-success my-4 d-none\" type=\"button\">Comprar Common</button>\r\n            <button id=\"formBuyMistic\" onClick={() => buytokens(1)} className=\"w-100 btn btn-lg btn-warning d-none\" type=\"button\">Comprar Mistic</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"row align-items-center g-lg-5\"> \r\n            {\r\n          balance && // si hay balance se imprimiran los NFTs.\r\n              balance.map((idToken) => {\r\n                \r\n                return  <FetchCard idToken={idToken} />\r\n              }) \r\n \r\n            }\r\n        </div> \r\n\r\n    <VideoPlayer style={{transform: `translateY(${offSetY * 1}px)`}}\r\n        className=\"Video\"\r\n        src={\r\n          \"./video.mp4\"\r\n        }\r\n        autoPlay={true}\r\n        muted={true}\r\n        loop={true}\r\n      />\r\n</div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}