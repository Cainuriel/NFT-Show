{"version":3,"sources":["helpers/getToken.js","FetchCard.js","App.js","index.js"],"names":["getToken","url","a","fetch","response","json","token","FetchCard","props","useState","name","description","image","rarity","number","total","object","setObject","nftContract","idToken","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","NFT","abi","console","log","_hex","tokenURI","tokenUri","updateToken","mensajeError","message","Swal","fire","title","text","icon","confirmButtonText","then","newToken","attributes","value","max_value","useEffect","fetchToken","className","parseInt","style","maxWidth","src","alt","App","balance","setBalance","network","setNetwork","setIdToken","ownerNFTs","presaleContract","offSetY","setOffSetY","handleScroll","scrollY","networkData","chainId","chainName","rpcUrls","nativeCurrency","symbol","decimals","blockExplorerUrls","request","method","params","getNetwork","init","accounts","accountConnection","subint","substr","subfinal","document","querySelector","innerHTML","checkingNFTs","classList","remove","tokensOfOwner","contractUserBalance","length","on","account","Presale","buyTokens","transation","showConfirmButton","imageUrl","imageWidth","imageHeight","imageAlt","wait","html","hash","result","isConfirmed","isDenied","data","addEventListener","removeEventListener","checkingNetwork","changeAccounts","showCancelButton","open","addNetwork","transform","id","onClick","type","onChange","e","target","htmlFor","buytokens","map","autoPlay","muted","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.98537e02.chunk.js","sourcesContent":["const getToken = async (url) => {\r\n\r\n   //const userId = Math.floor(Math.random() * 4 ) + 1;\r\n\r\nconst response = await fetch(url);\r\nconst token = await response.json();\r\nreturn token;\r\n\r\n}\r\n\r\nexport default getToken;","import React from \"react\";\r\nimport { useState, useEffect, useCallback } from \"react\";\r\nimport Swal from 'sweetalert2';\r\nimport { ethers } from 'ethers';\r\nimport NFT from './artifacts/contracts/FishervsPirate.sol/FishervsPirate.json';\r\nimport getToken from './helpers/getToken';\r\n\r\nconst FetchCard = (props) => { // @props: La id del NFT\r\n\r\n    const [object, setObject] = useState({\r\n        name: 'name',\r\n        description: 'description',\r\n        image: 'image',\r\n        rarity: 'rarity',\r\n        number: 'number',\r\n        total: 'total',\r\n      });\r\n      // 0x7243b30BbaB7492695D00f9Eebe369D6876ce2b1 TUTORIAL DE JUEGO DE COMPRA\r\n      const nftContract = \"0xaDFdc7719b764E58d88dE85945790Af40DdF70b1\"; // FishervsPirate test 1\r\n\r\n      // funcion para capturar la URI de un NFT\r\n      async function fetchToken(idToken)  {\r\n\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const contract = new ethers.Contract(nftContract, NFT.abi, signer);\r\n\r\n        console.log('idtoken ', idToken._hex);\r\n\r\n          try {\r\n\r\n            const tokenUri = await contract.tokenURI(idToken);\r\n             updateToken(tokenUri);\r\n\r\n          } catch (err) {\r\n            let mensajeError = err.message;\r\n            Swal.fire({\r\n              title: 'Fallo acceso a metadata',\r\n              text: `${mensajeError}`,\r\n              icon: 'error',\r\n              confirmButtonText: 'Cerrar'\r\n            })\r\n            console.log(\"Error: \", err)\r\n          }\r\n          \r\n   \r\n  }\r\n      // funcion que crea el objeto del token\r\n    const updateToken = async (url) => {\r\n       await getToken(url) // funcion que hace el fetch\r\n            .then(\r\n                (newToken) => {\r\n                  console.log('este es el metadata del token', newToken);\r\n                    setObject(\r\n                        {\r\n                            name: newToken.name,\r\n                            description: newToken.description,\r\n                            image: newToken.image,\r\n                            rarity: newToken.attributes[0].value,\r\n                            number: newToken.attributes[1].value,\r\n                            total: newToken.attributes[1].max_value,\r\n\r\n                        });\r\n                ;}\r\n            )\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        fetchToken(props.idToken);\r\n    }, []);\r\n\r\n    return (\r\n\r\n        <div key={object.name} className=\"col-lg-4 text-center text-lg-start py-2\">\r\n                  <small>{parseInt(props.idToken._hex, 16)}</small>\r\n            <div className=\"card mb-3\" style={{maxWidth: \"500px\"}}>\r\n                <div className=\"row g-0\">\r\n                    <div className=\"col-md-4\">\r\n                    <img src={object.image} className=\"img-fluid rounded-start\" alt={object.name}/>\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n                        <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{object.name}</h5>\r\n                        <p className=\"card-text\">{object.description}</p>\r\n                        <p className=\"card-text\"><small className=\"text-muted\">{object.rarity}</small></p>\r\n                        <p className=\"card-text\"><small className=\"text-muted\">{object.number} of {object.total}</small></p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FetchCard","import React from \"react\";\r\nimport { useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport Swal from 'sweetalert2';\r\nimport VideoPlayer from \"react-background-video-player\";\r\nimport { ethers } from 'ethers';\r\nimport NFT from './artifacts/contracts/FishervsPirate.sol/FishervsPirate.json';\r\nimport Presale from './artifacts/contracts/Presale.sol/Presale.json';\r\nimport FetchCard from './FetchCard';\r\n\r\n\r\n\r\nfunction App() {\r\n \r\n  const BINANCETESTNET = 'bnbt';\r\n      // 0x76e7662384C47608256Cc07F0CD169E1600b1862 contrato con los NFT en local.\r\n      // 0x7243b30BbaB7492695D00f9Eebe369D6876ce2b1 TUTORIAL DE JUEGO DE COMPRA\r\n  const nftContract = \"0xaDFdc7719b764E58d88dE85945790Af40DdF70b1\"; // FishervsPirate test 1\r\n  const [balance, setBalance] = useState(null);\r\n  const [network, setNetwork] = useState('no-net');\r\n  const [idToken, setIdToken] = useState(0);\r\n  const ownerNFTs = '0x322d9e3F049a845e9C8ED089B2Bdf8F33c65a08F';\r\n  const presaleContract = '0x78Af9A84f01144Ae14d0b62f56CC827e55D2f0F1'; // presale test beta 1\r\n\r\n // parallax effect\r\n  const [offSetY, setOffSetY] = useState(0);\r\n  const handleScroll = () => setOffSetY(window.scrollY);\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    }\r\n  }, [])\r\n\r\n  // se comprueba si se dispone de metamask, las funcion de chequeo de la red y cambio de cuenta\r\n  useEffect(function () {\r\n\r\n    if (typeof window.ethereum !== 'undefined') {\r\n    \r\n    checkingNetwork();\r\n    changeAccounts();\r\n  \r\n \r\n    } else {\r\n            Swal.fire({\r\n              title: \"No tiene metamask instalado\",\r\n              text: \"Cambie de navegador o puede instalárselo apretando al botón\",\r\n              showCancelButton: true,\r\n              confirmButtonText: \"Instalar\",\r\n              imageUrl: './img/metamask-transparent.png',\r\n              imageAlt: \"Instalar metamask\",\r\n            }).then((result) => {\r\n              /* Read more about isConfirmed, isDenied below */\r\n              if (result.isConfirmed) {\r\n                window.open('https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn', '_blank');  \r\n              }})};\r\n        \r\n      },[]);\r\n\r\n  // solo si hay cambios de red se activa este useEffect\r\n  useEffect(function () {\r\n\r\n      // comprueba si se dispone la red adecuada.\r\n      if(network !== BINANCETESTNET && network !== 'no-net' ){ \r\n\r\n          Swal.fire({\r\n            title: '¡Atencion!',\r\n            text: \"Estas en la red \"+network,\r\n            showCancelButton: true,\r\n            confirmButtonText: \"Instalar o cambiar a la red Testnet BSC\",\r\n            imageUrl: 'https://cryptodaily.io/wp-content/uploads/2021/07/p-2.png',\r\n            imageWidth: 300,\r\n            \r\n            imageAlt: 'Red Binance Smart Chain',\r\n          }).then((result) => {\r\n            /* Read more about isConfirmed, isDenied below */\r\n            if (result.isConfirmed) {\r\n              addNetwork();\r\n            }\r\n          })\r\n        } else {\r\n\r\n        console.log('ok network ', network );\r\n      }\r\n        \r\n        console.log('Control de network ', network );\r\n\r\n},[network]);\r\n\r\n  // funcion que cambia o instala la red de pruebas de BSC\r\n  async function addNetwork() {\r\n\r\n    let networkData = [{\r\n            chainId: \"0x61\",\r\n            chainName: \"BSCTESTNET\",\r\n            rpcUrls: [\"https://data-seed-prebsc-2-s3.binance.org:8545\"],\r\n            nativeCurrency: {\r\n              name: \"BINANCE COIN\",\r\n              symbol: \"BNB\",\r\n              decimals: 18,\r\n            },\r\n            blockExplorerUrls: [\"https://testnet.bscscan.com/\"],\r\n          },\r\n        ];\r\n\r\n      // agregar red o cambiar red\r\n      return window.ethereum.request({\r\n        method: \"wallet_addEthereumChain\",\r\n        params: networkData,\r\n      });\r\n  }\r\n\r\n    // captura de la blockchain de la metamask\r\n  async function checkingNetwork() {\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    // capturamos la red\r\n    const network = await provider.getNetwork();\r\n    console.log('network', network.name);\r\n    setNetwork(network.name);\r\n  }\r\n\r\n  // funcion de conexion a la red.\r\n  async function init() {  \r\n            // captura la cuenta del usuario\r\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n            let accountConnection = accounts[0];\r\n            console.log('esta conectado',accountConnection);\r\n            let subint = accountConnection.substr(0,4);\r\n            let subfinal = accountConnection.substr(-4,4);\r\n            document.querySelector('#intro').innerHTML ='Conectado con la cuenta: ' + subint + '...' + subfinal;\r\n            await checkingNFTs();\r\n            let element = document.querySelector(\"#formBuy\");\r\n            element.classList.remove(\"d-none\");\r\n                \r\n  }\r\n\r\n\r\n     // comprobacion de NFTs\r\n  async function checkingNFTs() { \r\n\r\n\r\n     const provider = await new ethers.providers.Web3Provider(window.ethereum);\r\n     const signer = provider.getSigner();\r\n     const contract = await new ethers.Contract(nftContract, NFT.abi, signer);\r\n\r\n     try {\r\n       const contractUserBalance = await contract.tokensOfOwner(ownerNFTs);\r\n        console.log('contract user balance', contractUserBalance);\r\n          // comprobamos si el usuario tiene avatares.\r\n          if(contractUserBalance.length > 0) {\r\n            document.querySelector('#tokens').innerHTML ='Precio: 0.1 BNBs';\r\n            let newArray = contractUserBalance;\r\n            setBalance(newArray);\r\n            \r\n              }    else {\r\n                document.querySelector('#tokens').innerHTML ='Precio: 0.1 BNBs';\r\n\r\n              }\r\n\r\n        } catch (err) {\r\n          let mensajeError = err.message;\r\n          Swal.fire({\r\n            title: 'Ooops!',\r\n            text: `${mensajeError}`,\r\n            icon: 'error',\r\n            confirmButtonText: 'Cerrar'\r\n          })\r\n          console.log(\"Error: \", err)\r\n        }\r\n\r\n  }\r\n\r\n\r\n    // funcion que detecta los cambios de cuenta\r\n    async function changeAccounts() {\r\n          \r\n      if (typeof window.ethereum !== 'undefined') {\r\n\r\n        window.ethereum.on(\"accountsChanged\", async function () {\r\n\r\n          await init();\r\n          \r\n        });\r\n\r\n      }\r\n    }\r\n    // funcion que abre el faucet para pedir BNBs de prueba\r\n    function faucet() {\r\n      window.open('https://testnet.binance.org/faucet-smart', '_blank');  \r\n    }\r\n\r\n    async function buytokens() {\r\n        \r\n          const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n          const signer = provider.getSigner();\r\n          const contract = new ethers.Contract(presaleContract, Presale.abi, signer);\r\n          const bnbamount ='100000000000000000';\r\n          try {\r\n            const transation = await contract.buyTokens(account, idToken, {value: bnbamount});\r\n\r\n            Swal.fire({\r\n              title: 'Procesando el pago',\r\n              text: 'Espere. No actualice la página',\r\n              showConfirmButton: false,\r\n              imageUrl: 'https://thumbs.gfycat.com/ConventionalOblongFairybluebird-size_restricted.gif',\r\n              imageWidth: 100,\r\n              imageHeight: 100,\r\n              imageAlt: 'Procesando el pago',\r\n  \r\n            });\r\n            const Ok = await transation.wait();\r\n                  if(Ok) {\r\n                    Swal.fire({\r\n                    title:  `Se ha envíado el NFT con la id ${idToken} a la cuenta ${account}`,\r\n                    html: `<a href=\"https://testnet.bscscan.com/tx/${transation.hash}\" target=\"_blank\" rel=\"noreferrer\">Hash de la transacción</a>`,\r\n                    icon: 'success',\r\n                    confirmButtonText: 'Cerrar'\r\n                  }).then((result) => {\r\n                    /* Read more about isConfirmed, isDenied below */\r\n                    if (result.isConfirmed) {\r\n                      init();\r\n                    } else if (result.isDenied) {\r\n                      init();\r\n                    }\r\n                  })\r\n          \r\n              };\r\n        \r\n      \r\n          }catch (err) {\r\n            let mensajeError = err.message;\r\n             \r\n            if (err.data) {\r\n  \r\n              if (err.data.message === 'execution reverted: You have already purchased the maximum allowed NFTs') {\r\n                mensajeError =  'Usted ya ha comprado el máximo de NFTs permitidos';\r\n              } else if(err.data.message === 'execution reverted: value sent needs to be atleast sale price'){\r\n                mensajeError =  'Debe de pagar como mínimo el precio estipulado';\r\n              } else {\r\n                console.log('error: ',mensajeError);\r\n              }\r\n            }\r\n        \r\n            Swal.fire({\r\n              title: 'Ooops!',\r\n              text: `${mensajeError}`,\r\n              icon: 'error',\r\n              confirmButtonText: 'Cerrar'\r\n            })\r\n            console.log(\"Error: \", err)\r\n          }\r\n       \r\n    }\r\n\r\n  return (\r\n\r\n<div className=\"frame container\">\r\n        <div className=\"main row align-items-center g-lg-5 py-5\" style={{transform: `translateY(-${offSetY * 0.3}px)`}}>\r\n          <div className=\"col-lg-4 text-center text-lg-start\">\r\n            <form className=\"p-4 p-md-5 border rounded-3 bg-light\">\r\n            <div className=\"form-floating mb-3\">\r\n            <h2 id=\"intro\" className=\"text-muted\">No conectado</h2>\r\n            </div>\r\n            <hr className=\"my-4\"/>\r\n            <h3 id=\"tokens\" className=\"text-muted\"></h3>\r\n            </form>\r\n          </div>\r\n          <div className=\"col-lg-4 text-center text-lg-start\">\r\n            <button id=\"btn-firma\"  onClick={() => init()} className=\"w-100 btn btn-lg btn-danger mb-4\" type=\"button\">Conectar Metamask</button>\r\n            <button id=\"faucet\"  onClick={() => faucet()} className=\"w-100 btn btn-lg btn-primary\" type=\"button\">Faucet de Binance</button>\r\n            {/* buy form */}\r\n            <form id=\"formBuy\" className=\"p-4 p-md-5 border rounded-3 bg-light d-none mt-4\">\r\n                    <div  className=\"form-floating mb-3\">\r\n                      <input  value={idToken} onChange={e => setIdToken(e.target.value)} type=\"number\" className=\"form-control\" id=\"TokentoBuy\"/>\r\n                      <label   htmlFor=\"TokentoBuy\">Ingrese la ID </label>\r\n                    </div>\r\n                    <button onClick={() => buytokens()}  id=\"buyButton\" className=\"w-100 btn btn-lg btn-success my-4\" type=\"button\">Comprar NFTs</button>\r\n                    <hr className=\"my-4\"/>\r\n            </form>\r\n                {/* end buy form */}\r\n          </div>\r\n        </div>\r\n        <div className=\"row align-items-center g-lg-5\"> \r\n            {\r\n          balance && // si hay balance se imprimiran los NFTs.\r\n              balance.map((idToken) => {\r\n                \r\n                return  <FetchCard idToken={idToken} />\r\n              }) \r\n \r\n            }\r\n        </div> \r\n\r\n    <VideoPlayer style={{transform: `translateY(${offSetY * 1}px)`}}\r\n        className=\"Video\"\r\n        src={\r\n          \"https://fishervspirate.com//wp-content//uploads//WhatsApp-Video-2021-09-11-at-11.17.45.mp4\"\r\n        }\r\n        autoPlay={true}\r\n        muted={true}\r\n      />\r\n</div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}