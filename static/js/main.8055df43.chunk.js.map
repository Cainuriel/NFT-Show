{"version":3,"sources":["helpers/getToken.js","FetchCard.js","App.js","index.js"],"names":["getToken","url","a","fetch","response","json","token","FetchCard","props","useState","name","description","image","scarcity","object","setObject","nftContract","idToken","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","NFT","abi","tokenURI","tokenUri","updateToken","mensajeError","message","Swal","fire","title","text","icon","confirmButtonText","console","log","then","newToken","rarity","attributes","value","number","total","max_value","useEffect","fetchToken","className","style","maxWidth","src","alt","App","balance","setBalance","network","setNetwork","offSetY","setOffSetY","handleScroll","scrollY","networkData","chainId","chainName","rpcUrls","nativeCurrency","symbol","decimals","blockExplorerUrls","request","method","params","getNetwork","init","accounts","accountConnection","subint","substr","subfinal","document","querySelector","innerHTML","checkingNFTs","classList","remove","account","tokensOfOwner","contractUserBalance","length","newArray","Object","values","on","mintToken","from","transation","showConfirmButton","imageUrl","imageWidth","imageHeight","imageAlt","wait","showCancelButton","confirmButtonColor","result","isConfirmed","data","addEventListener","removeEventListener","checkingNetwork","changeAccounts","open","addNetwork","transform","id","onClick","type","buytokens","map","autoPlay","muted","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.8055df43.chunk.js","sourcesContent":["const getToken = async (url) => {\r\n\r\n   //const userId = Math.floor(Math.random() * 4 ) + 1;\r\n\r\nconst response = await fetch(url);\r\nconst token = await response.json();\r\nreturn token;\r\n\r\n}\r\n\r\nexport default getToken;","import React from \"react\";\r\nimport { useState, useEffect, useCallback } from \"react\";\r\nimport Swal from 'sweetalert2';\r\nimport { ethers } from 'ethers';\r\nimport NFT from './artifacts/contracts/NFTs.sol/NFTs.json';\r\nimport getToken from './helpers/getToken';\r\n\r\nconst FetchCard = (props) => { // @props: La id del NFT\r\n\r\n    const [object, setObject] = useState({\r\n        name: 'name',\r\n        description: 'description',\r\n        image: 'image',\r\n        scarcity: 'scarcity'\r\n      });\r\n       // 0x76e7662384C47608256Cc07F0CD169E1600b1862 contrato con los NFT en local.\r\n    const nftContract = \"0x7243b30BbaB7492695D00f9Eebe369D6876ce2b1\"; // TUTORIAL DE COMPRA\r\n\r\n      // funcion para capturar la URI de un NFT\r\n      async function fetchToken(idToken)  {\r\n\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const contract = new ethers.Contract(nftContract, NFT.abi, signer);\r\n\r\n          try {\r\n\r\n            const tokenUri = await contract.tokenURI(idToken);\r\n             updateToken(tokenUri);\r\n\r\n          } catch (err) {\r\n            let mensajeError = err.message;\r\n            Swal.fire({\r\n              title: 'Ooops!',\r\n              text: `${mensajeError}`,\r\n              icon: 'error',\r\n              confirmButtonText: 'Cerrar'\r\n            })\r\n            console.log(\"Error: \", err)\r\n          }\r\n          \r\n   \r\n  }\r\n      // funcion que crea el objeto del token\r\n    const updateToken = async (url) => {\r\n       await getToken(url) // funcion que hace el fetch\r\n            .then(\r\n                (newToken) => {\r\n                  console.log('este es el metadata del token', newToken);\r\n                    setObject(\r\n                        {\r\n                            name: newToken.name,\r\n                            description: newToken.description,\r\n                            image: newToken.image,\r\n                            rarity: newToken.attributes[0].value,\r\n                            number: newToken.attributes[1].value,\r\n                            total: newToken.attributes[1].max_value,\r\n\r\n                        });\r\n                ;}\r\n            )\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        fetchToken(props.idToken);\r\n    }, []);\r\n\r\n    return (\r\n      \r\n        <div key={object.name} className=\"col-lg-4 text-center text-lg-start py-2\">\r\n            <div className=\"card mb-3\" style={{maxWidth: \"500px\"}}>\r\n                <div className=\"row g-0\">\r\n                    <div className=\"col-md-4\">\r\n                    <img src={object.image} className=\"img-fluid rounded-start\" alt={object.name}/>\r\n                    </div>\r\n                    <div className=\"col-md-8\">\r\n                        <div className=\"card-body\">\r\n                        <h5 className=\"card-title\">{object.name}</h5>\r\n                        <p className=\"card-text\">{object.description}</p>\r\n                        <p className=\"card-text\"><small className=\"text-muted\">{object.rarity}</small></p>\r\n                        <p className=\"card-text\"><small className=\"text-muted\">{object.number} of {object.total}</small></p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FetchCard","import React from \"react\";\r\nimport { useEffect, useState } from 'react';\r\nimport './App.css';\r\nimport Swal from 'sweetalert2';\r\nimport VideoPlayer from \"react-background-video-player\";\r\nimport { ethers } from 'ethers';\r\nimport NFT from './artifacts/contracts/NFTs.sol/NFTs.json';\r\nimport FetchCard from './FetchCard';\r\n\r\n\r\n\r\nfunction App() {\r\n \r\n  const BINANCETESTNET = 'bnbt';\r\n      // 0x76e7662384C47608256Cc07F0CD169E1600b1862 contrato con los NFT en local.\r\n  const nftContract = \"0x7243b30BbaB7492695D00f9Eebe369D6876ce2b1\"; // TUTORIAL DE COMPRA\r\n  const [balance, setBalance] = useState(null);\r\n  const [network, setNetwork] = useState('no-net');\r\n\r\n // parallax effect\r\n  const [offSetY, setOffSetY] = useState(0);\r\n  const handleScroll = () => setOffSetY(window.scrollY);\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    }\r\n  }, [])\r\n\r\n  // se comprueba si se dispone de metamask, las funcion de chequeo de la red y cambio de cuenta\r\n  useEffect(function () {\r\n\r\n    if (typeof window.ethereum !== 'undefined') {\r\n    \r\n    checkingNetwork();\r\n    changeAccounts();\r\n  \r\n \r\n    } else {\r\n            Swal.fire({\r\n              title: \"No tiene metamask instalado\",\r\n              text: \"Cambie de navegador o puede instalárselo apretando al botón\",\r\n              showCancelButton: true,\r\n              confirmButtonText: \"Instalar\",\r\n              imageUrl: './img/metamask-transparent.png',\r\n              imageAlt: \"Instalar metamask\",\r\n            }).then((result) => {\r\n              /* Read more about isConfirmed, isDenied below */\r\n              if (result.isConfirmed) {\r\n                window.open('https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn', '_blank');  \r\n              }})};\r\n        \r\n      },[]);\r\n\r\n  // solo si hay cambios de red se activa este useEffect\r\n  useEffect(function () {\r\n\r\n      // comprueba si se dispone la red adecuada.\r\n      if(network !== BINANCETESTNET && network !== 'no-net' ){ \r\n\r\n          Swal.fire({\r\n            title: '¡Atencion!',\r\n            text: \"Estas en la red \"+network,\r\n            showCancelButton: true,\r\n            confirmButtonText: \"Instalar o cambiar a la red Testnet BSC\",\r\n            imageUrl: 'https://cryptodaily.io/wp-content/uploads/2021/07/p-2.png',\r\n            imageWidth: 300,\r\n            \r\n            imageAlt: 'Red Binance Smart Chain',\r\n          }).then((result) => {\r\n            /* Read more about isConfirmed, isDenied below */\r\n            if (result.isConfirmed) {\r\n              addNetwork();\r\n            }\r\n          })\r\n        } else {\r\n\r\n        console.log('ok network ', network );\r\n      }\r\n        \r\n        console.log('Control de network ', network );\r\n\r\n},[network]);\r\n\r\n  // funcion que cambia o instala la red de pruebas de BSC\r\n  async function addNetwork() {\r\n\r\n    let networkData = [{\r\n            chainId: \"0x61\",\r\n            chainName: \"BSCTESTNET\",\r\n            rpcUrls: [\"https://data-seed-prebsc-2-s3.binance.org:8545\"],\r\n            nativeCurrency: {\r\n              name: \"BINANCE COIN\",\r\n              symbol: \"BNB\",\r\n              decimals: 18,\r\n            },\r\n            blockExplorerUrls: [\"https://testnet.bscscan.com/\"],\r\n          },\r\n        ];\r\n\r\n      // agregar red o cambiar red\r\n      return window.ethereum.request({\r\n        method: \"wallet_addEthereumChain\",\r\n        params: networkData,\r\n      });\r\n  }\r\n\r\n    // captura de la blockchain de la metamask\r\n  async function checkingNetwork() {\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    // capturamos la red\r\n    const network = await provider.getNetwork();\r\n    console.log('network', network.name);\r\n    setNetwork(network.name);\r\n  }\r\n\r\n  // funcion de conexion a la red.\r\n  async function init() {  \r\n            // captura la cuenta del usuario\r\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n            let accountConnection = accounts[0];\r\n            console.log('esta conectado',accountConnection);\r\n            let subint = accountConnection.substr(0,4);\r\n            let subfinal = accountConnection.substr(-4,4);\r\n            document.querySelector('#intro').innerHTML ='Conectado con la cuenta: ' + subint + '...' + subfinal;\r\n            checkingNFTs(accountConnection);\r\n            let element = document.querySelector(\"#buyButton\");\r\n            element.classList.remove(\"d-none\");\r\n                \r\n  }\r\n\r\n\r\n     // comprobacion de NFTs\r\n  async function checkingNFTs(account) { \r\n\r\n\r\n     const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n     const signer = provider.getSigner();\r\n     const contract = new ethers.Contract(nftContract, NFT.abi, signer);\r\n\r\n     try {\r\n       const contractUserBalance = await contract.tokensOfOwner(account);\r\n\r\n          // comprobamos si el usuario tiene avatares.\r\n          if(contractUserBalance.length > 0) {\r\n            document.querySelector('#tokens').innerHTML ='Sigue comprando hasta encontrar el premio sorpresa';\r\n            let newArray = Object.values(contractUserBalance);\r\n            \r\n            setBalance(newArray);\r\n            \r\n              }    else {\r\n                document.querySelector('#tokens').innerHTML ='Precio: 0.4 BNBs';\r\n\r\n              }\r\n\r\n        } catch (err) {\r\n          let mensajeError = err.message;\r\n          Swal.fire({\r\n            title: 'Ooops!',\r\n            text: `${mensajeError}`,\r\n            icon: 'error',\r\n            confirmButtonText: 'Cerrar'\r\n          })\r\n          console.log(\"Error: \", err)\r\n        }\r\n\r\n  }\r\n\r\n\r\n    // funcion que detecta los cambios de cuenta\r\n    async function changeAccounts() {\r\n          \r\n      if (typeof window.ethereum !== 'undefined') {\r\n\r\n        window.ethereum.on(\"accountsChanged\", async function () {\r\n\r\n          await init();\r\n          \r\n        });\r\n\r\n      }\r\n    }\r\n    // funcion que abre el faucet para pedir BNBs de prueba\r\n    function faucet() {\r\n      window.open('https://testnet.binance.org/faucet-smart', '_blank');  \r\n    }\r\n\r\n    async function buytokens() {\r\n        \r\n          const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n          const signer = provider.getSigner();\r\n          const contract = new ethers.Contract(nftContract, NFT.abi, signer);\r\n          //const bnbamount = ethers.utils.parseEther(amount);400000000000000000\r\n          const bnbamount ='400000000000000000';\r\n          try {\r\n            const transation = await contract.mintToken({from: account, value: bnbamount });\r\n\r\n            Swal.fire({\r\n              title: 'Procesando su compra',\r\n              text: 'No actualice la página',\r\n              // icon: 'info',\r\n              showConfirmButton: false,\r\n              imageUrl: 'https://thumbs.gfycat.com/ConventionalOblongFairybluebird-size_restricted.gif',\r\n              imageWidth: 100,\r\n              imageHeight: 100,\r\n              imageAlt: 'procesando la imagen',\r\n  \r\n            })\r\n            const compraOk = await transation.wait();\r\n  \r\n            if (compraOk) {\r\n              Swal.fire({\r\n                title: 'Felicidades ya tiene un nuevo NFTs',\r\n                text: 'Diviértase con el!',\r\n                icon: 'success',\r\n                showCancelButton: false,\r\n                confirmButtonColor: '#3085d6',\r\n                confirmButtonText: 'OK'\r\n              }).then((result) => {\r\n                if (result.isConfirmed) {\r\n                 init();\r\n                }\r\n              })\r\n              setBalance([])\r\n            }\r\n  \r\n            console.log(`La cuenta ${account}, ha recibido el NFT correctamente.`);\r\n      \r\n          } catch (err) {\r\n            let mensajeError = err.message;\r\n             \r\n            if (err.data) {\r\n                mensajeError =  err.data.message;\r\n            }\r\n        \r\n            Swal.fire({\r\n              title: 'Ooops!',\r\n              text: `${mensajeError}`,\r\n              icon: 'error',\r\n              confirmButtonText: 'Cerrar'\r\n            })\r\n            console.log(\"Error: \", err)\r\n          }\r\n       \r\n    }\r\n\r\n  return (\r\n\r\n<div className=\"frame container\">\r\n        <div className=\"main row align-items-center g-lg-5 py-5\" style={{transform: `translateY(-${offSetY * 0.3}px)`}}>\r\n          <div className=\"col-lg-4 text-center text-lg-start\">\r\n            <form className=\"p-4 p-md-5 border rounded-3 bg-light\">\r\n            <div className=\"form-floating mb-3\">\r\n            <h2 id=\"intro\" className=\"text-muted\">No conectado</h2>\r\n            </div>\r\n            <hr className=\"my-4\"/>\r\n            <h3 id=\"tokens\" className=\"text-muted\"></h3>\r\n            </form>\r\n          </div>\r\n          <div className=\"col-lg-4 text-center text-lg-start\">\r\n            <button id=\"btn-firma\"  onClick={() => init()} className=\"w-100 btn btn-lg btn-danger mb-4\" type=\"button\">Conectar Metamask</button>\r\n            <button id=\"faucet\"  onClick={() => faucet()} className=\"w-100 btn btn-lg btn-primary\" type=\"button\">Faucet de Binance</button>\r\n            <button onClick={() => buytokens()}  id=\"buyButton\" className=\"w-100 btn btn-lg btn-success d-none my-4\" type=\"button\">Comprar NFTs</button>\r\n          </div>\r\n        </div>\r\n        <div className=\"row align-items-center g-lg-5\"> \r\n            {\r\n          balance && // si hay balance se imprimiran los NFTs.\r\n              balance.map((idToken) => {\r\n                return     <FetchCard idToken={idToken} />\r\n              }) \r\n \r\n            }\r\n        </div> \r\n\r\n    <VideoPlayer style={{transform: `translateY(${offSetY * 1}px)`}}\r\n        className=\"Video\"\r\n        src={\r\n          \"https://fishervspirate.com//wp-content//uploads//WhatsApp-Video-2021-09-11-at-11.17.45.mp4\"\r\n        }\r\n        autoPlay={true}\r\n        muted={true}\r\n      />\r\n</div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}