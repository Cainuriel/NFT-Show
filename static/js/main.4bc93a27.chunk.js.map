{"version":3,"sources":["helpers/getToken.js","FetchCard.js","App.js","index.js"],"names":["getToken","url","a","fetch","response","json","token","FetchCard","props","useState","name","description","img","object","setObject","nftContract","idToken","provider","ethers","providers","Web3Provider","window","ethereum","signer","getSigner","contract","Contract","NFT","abi","tokenURI","tokenUri","updateToken","mensajeError","message","Swal","fire","title","text","icon","confirmButtonText","console","log","then","newToken","image","useEffect","fetchToken","className","style","maxWidth","parseInt","_hex","src","App","balance","setBalance","network","setNetwork","desertPrice","setdesertPrice","firePrice","setfirePrice","stormsPrice","setstormsPrice","desertURI","fireURI","stormsURI","offSetY","setOffSetY","handleScroll","scrollY","networkData","chainId","chainName","rpcUrls","nativeCurrency","symbol","decimals","blockExplorerUrls","request","method","params","getNetwork","init","accounts","accountConnection","subint","substr","subfinal","document","querySelector","innerHTML","checkingNFTs","classList","remove","account","getLandsOfOwner","getPriceOfLands","priceNFTs","priceLands","length","on","createLandDesertFunction","createLandDesert","value","createLandFireFunction","createLandFire","createLandStormsFunction","createLandStorms","landPriceDesert","priceRareBigNumber","landPriceFire","priceEpicBigNumber","landPriceStorms","priceLegendBigNumber","push","utils","formatEther","toString","buytokens","type","transaction","alert","showConfirmButton","imageUrl","imageWidth","imageHeight","imageAlt","wait","html","hash","result","isConfirmed","isDenied","data","mixin","customClass","confirmButton","buttonsStyling","ChainLInk","getLatestPrice","values","date","Date","OneMatic","getHours","getMinutes","addEventListener","removeEventListener","checkingNetwork","changeAccounts","showCancelButton","open","addNetwork","transform","id","onClick","chainLink","href","target","map","width","autoPlay","muted","loop","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.4bc93a27.chunk.js","sourcesContent":["const getToken = async (url) => {\r\n\r\n   //const userId = Math.floor(Math.random() * 4 ) + 1;\r\n\r\nconst response = await fetch(url);\r\nconst token = await response.json();\r\nreturn token;\r\n\r\n}\r\n\r\nexport default getToken;","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport Swal from 'sweetalert2';\r\nimport { ethers } from 'ethers';\r\nimport NFT from './artifacts/contracts/AgeOfVictoryLands.sol/AgeOfVictoryLands.json';\r\nimport getToken from './helpers/getToken';\r\n\r\nconst FetchCard = (props) => { \r\n\r\n    const [object, setObject] = useState({\r\n        name: 'name',\r\n        description: 'description',\r\n        img: 'image'\r\n      });\r\n      const nftContract = \"0x4E496290F2d82Ea300B4467A36fE39F5EB3fE5B9\"; // mumbai victory\r\n      // funcion para capturar la URI de un NFT\r\n      async function fetchToken(idToken)  {\r\n\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const contract = new ethers.Contract(nftContract, NFT.abi, signer);\r\n\r\n          try {\r\n\r\n            const tokenUri = await contract.tokenURI(idToken);\r\n             updateToken(`${tokenUri}`);\r\n          } catch (err) {\r\n            let mensajeError = err.message;\r\n            Swal.fire({\r\n              title: 'Fallo acceso a metadata',\r\n              text: `${mensajeError}`,\r\n              icon: 'error',\r\n              confirmButtonText: 'Cerrar'\r\n            })\r\n            console.log(\"Error: \", err)\r\n          }\r\n          \r\n   \r\n  }\r\n\r\n    const updateToken = async (url) => {\r\n       await getToken(url) \r\n            .then(\r\n                (newToken) => {\r\n                  console.log('new token ',newToken);\r\n                    setObject(\r\n                        {\r\n                          name: newToken.name,\r\n                          description: newToken.description,\r\n                          img: newToken.image\r\n                        });\r\n                ;}\r\n            )\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchToken(props.idToken);\r\n    }, []);\r\n\r\n    return (\r\n\r\n        <div key={object.name} className=\"col-12 text-center d-flex justify-content-center\">\r\n                  \r\n            <div className=\"card mb-3 transparent\" style={{maxWidth: \"750px\"}}>\r\n              <small className=\"text-white\">ID #{parseInt(props.idToken._hex, 16)}</small>\r\n                <div className=\"row g-0\">\r\n                    <div className=\"col-12\">\r\n                    <img src={`${object.img} `} className=\"img-fluid rounded-start my-3\"/>\r\n                    </div>\r\n                    <div className=\"col-12\">\r\n                        <div className=\"card-body d-flex justify-content-between\">\r\n                        <h5 className=\"card-title text-white\">{object.name}</h5>\r\n                        <p className=\"card-text text-white\">{object.description}</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default FetchCard","import React from \"react\";\r\nimport { useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport Swal from 'sweetalert2';\r\nimport VideoPlayer from \"react-background-video-player\";\r\nimport { ethers } from 'ethers';\r\nimport NFT from './artifacts/contracts/AgeOfVictoryLands.sol/AgeOfVictoryLands.json';\r\nimport FetchCard from './FetchCard';\r\nimport ChainLInk from './artifacts/contracts/OracleMaticUSD.sol/OracleMaticUSD.json';\r\n\r\n\r\nfunction App() {\r\n \r\n  const MUMBAI = 'maticmum';\r\n  const nftContract = \"0x4E496290F2d82Ea300B4467A36fE39F5EB3fE5B9\"; // MUMBAI victory\r\n  const [balance, setBalance] = useState([]);\r\n  const [network, setNetwork] = useState('no-net');\r\n  const [desertPrice, setdesertPrice] = useState('0');\r\n  const [firePrice, setfirePrice] = useState('0');\r\n  const [stormsPrice, setstormsPrice] = useState('0');\r\n  const desertURI = \"QmZX3LvU2pAdz6hnYpg8DCta7yCJMZcNmBRbCoHA8LSReT\";\r\n  const fireURI = \"QmZkK75YJMgTPHBisXsFN3YMzagRcGH6Npq2qz3yWSNMaH\";\r\n  const stormsURI = \"QmStCQQaVMNwM4pBWjqj2m2sGfTHxsRit9t47qwCJXwnJP\";\r\n\r\n\r\n // parallax effect\r\n  const [offSetY, setOffSetY] = useState(0);\r\n  const handleScroll = () => setOffSetY(window.scrollY);\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', handleScroll);\r\n    return () => {\r\n      window.removeEventListener('scroll', handleScroll);\r\n    }\r\n  }, [])\r\n\r\n  // se comprueba si se dispone de metamask, las funcion de chequeo de la red y cambio de cuenta\r\n  useEffect(function () {\r\n\r\n    if (typeof window.ethereum !== 'undefined') {\r\n    \r\n    checkingNetwork();\r\n    changeAccounts();\r\n  \r\n \r\n    } else {\r\n            Swal.fire({\r\n              title: \"No tiene metamask instalado\",\r\n              text: \"Cambie de navegador o puede instalárselo apretando al botón\",\r\n              showCancelButton: true,\r\n              confirmButtonText: \"Instalar\",\r\n              imageUrl: './img/metamask-transparent.png',\r\n              imageAlt: \"Instalar metamask\",\r\n            }).then((result) => {\r\n              /* Read more about isConfirmed, isDenied below */\r\n              if (result.isConfirmed) {\r\n                window.open('https://chrome.google.com/webstore/detail/metamask/nkbihfbeogaeaoehlefnkodbefgpgknn', '_blank');  \r\n              }})};\r\n        \r\n      },[]);\r\n\r\n  // control de cambio de red\r\n  useEffect(function () {\r\n\r\n      // comprueba si se dispone la red adecuada.\r\n      if(network !== MUMBAI && network !== 'no-net' ){ \r\n          console.log('red red red ', network);\r\n          Swal.fire({\r\n            title: '¡Atención!',\r\n            text: \"Estas en la red \"+network,\r\n            showCancelButton: true,\r\n            confirmButtonText: \"Instalar o cambiar a la red de pruebas de Polygon\",\r\n            imageUrl: 'https://criptoinforme.com/wp-content/uploads/2021/07/polygon-matic-card-image.jpg',\r\n            imageWidth: 300,\r\n            \r\n            imageAlt: 'Red de pruebas de Polygon',\r\n          }).then((result) => {\r\n            /* Read more about isConfirmed, isDenied below */\r\n            if (result.isConfirmed) {\r\n              addNetwork();\r\n            }\r\n          })\r\n        }\r\n      \r\n},[network]);\r\n\r\n  // funcion que cambia o instala la red de pruebas de BSC\r\n  async function addNetwork() {\r\n\r\n    let networkData = [{\r\n            chainId: \"0x13881\",\r\n            chainName: \"MOMBAI\",\r\n            rpcUrls: [\"https://matic-mumbai.chainstacklabs.com\"],\r\n            nativeCurrency: {\r\n              name: \"MATIC\",\r\n              symbol: \"MATIC\",\r\n              decimals: 18,\r\n            },\r\n            blockExplorerUrls: [\"https://mumbai.polygonscan.com/\"],\r\n          },\r\n        ];\r\n\r\n      // agregar red o cambiar red\r\n      return window.ethereum.request({\r\n        method: \"wallet_addEthereumChain\",\r\n        params: networkData,\r\n      });\r\n  }\r\n\r\n    // captura de la blockchain de la metamask\r\n  async function checkingNetwork() {\r\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n    // capturamos la red\r\n    const network = await provider.getNetwork();\r\n    //console.log('network', network.name);\r\n    setNetwork(network.name);\r\n  }\r\n\r\n  // funcion de conexion a la red.\r\n  async function init() {  \r\n            // captura la cuenta del usuario\r\n            const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n            let accountConnection = accounts[0];\r\n            //console.log('esta conectado',accountConnection);\r\n            let subint = accountConnection.substr(0,4);\r\n            let subfinal = accountConnection.substr(-4,4);\r\n            document.querySelector('#intro').innerHTML ='Conectado con la cuenta: ' + subint + '...' + subfinal;\r\n            await checkingNFTs(accountConnection);\r\n            let element = document.querySelector(\"#formBuyLegend\");\r\n            element.classList.remove(\"d-none\");\r\n            let element2 = document.querySelector(\"#formBuyEpic\");\r\n            element2.classList.remove(\"d-none\");\r\n            let element3 = document.querySelector(\"#formBuyRare\");\r\n            element3.classList.remove(\"d-none\");\r\n            let element4 = document.querySelector(\"#oracle\");\r\n            element4.classList.remove(\"d-none\");\r\n      \r\n                \r\n  }\r\n     // comprobacion de NFTs\r\n  async function checkingNFTs(account) { \r\n\r\n     const provider = await new ethers.providers.Web3Provider(window.ethereum);\r\n     const signer = provider.getSigner();\r\n     const contract = await new ethers.Contract(nftContract, NFT.abi, signer);\r\n\r\n     try {          // comprobamos si el usuario tiene lands.\r\n       setBalance(await contract.getLandsOfOwner(account));\r\n       \r\n        } catch (err) {\r\n          let mensajeError = err.message;\r\n          if (err.message === 'call revert exception (method=\"getLandsOfOwner(address)\", errorArgs=null, errorName=null, errorSignature=null, reason=null, code=CALL_EXCEPTION, version=abi/5.5.0)') {\r\n            mensajeError =  'No ha cambiado a la red adecuada. Cambie de red y vuelva a recargar.';\r\n          } \r\n          \r\n          Swal.fire({\r\n            title: 'Ooops!',\r\n            text: `${mensajeError}`,\r\n            icon: 'error',\r\n            confirmButtonText: 'Cerrar'\r\n          })\r\n          //console.log(\"Error: \", err)\r\n        }\r\n    // let newArray = contractUserBalance;\r\n    // setBalance(newArray);\r\n     await getPriceOfLands(contract);\r\n  }\r\n\r\n  async function getPriceOfLands(contract) {\r\n    const priceLands = await priceNFTs(contract);\r\n    console.log('desert, fire, storms', priceLands[0],  priceLands[1],  priceLands[2]);\r\n    if(balance.length > 0) {\r\n      document.querySelector('#tokens').innerHTML = `Desert Land: ${ priceLands[0]}, Land of Fire: ${ priceLands[1]} Land of Storms: ${ priceLands[2]}`;\r\n        }    else {\r\n          document.querySelector('#tokens').innerHTML = `Desert Land: ${ priceLands[0]}, Land of Fire: ${ priceLands[1]} Land of Storms: ${ priceLands[2]}`;\r\n        }\r\n  }\r\n\r\n\r\n    // funcion que detecta los cambios de cuenta\r\n    async function changeAccounts() {\r\n          \r\n      if (typeof window.ethereum !== 'undefined') {\r\n\r\n        window.ethereum.on(\"accountsChanged\", async function () {\r\n\r\n          await init();\r\n          \r\n        });\r\n\r\n      }\r\n    }\r\n    // funcion que abre el faucet para pedir BNBs de prueba\r\n    function faucet() {\r\n      window.open('https://faucet.polygon.technology', '_blank');  \r\n    }\r\n\r\n    async function createLandDesertFunction(contract) {\r\n      return await contract.createLandDesert(desertURI, {value: desertPrice})\r\n    }\r\n    \r\n    async function createLandFireFunction(contract) {\r\n      return await contract.createLandFire(fireURI, {value: firePrice})\r\n    }\r\n    \r\n    async function createLandStormsFunction(contract) {\r\n      return await contract.createLandStorms(stormsURI, {value: stormsPrice})\r\n    }\r\n\r\nasync function priceNFTs(contract) {\r\n  //Tokens Balance Reserved of user\r\n  try {\r\n    const priceRareBigNumber = await contract.landPriceDesert();\r\n    const priceEpicBigNumber = await contract.landPriceFire();\r\n    const priceLegendBigNumber = await contract.landPriceStorms();\r\n    setdesertPrice(priceRareBigNumber);\r\n    setfirePrice(priceEpicBigNumber);\r\n    setstormsPrice(priceLegendBigNumber);\r\n    console.log('Desert Price ', parseInt(priceRareBigNumber));\r\n    let priceLands = [];\r\n    priceLands.push(ethers.utils.formatEther(priceRareBigNumber ).toString());\r\n    priceLands.push(ethers.utils.formatEther(priceEpicBigNumber).toString());\r\n    priceLands.push(ethers.utils.formatEther(priceLegendBigNumber).toString());\r\n    console.log('captura de precios', priceLands);\r\n    return priceLands;\r\n\r\n  } catch (err) {\r\n    console.log(\"Error: \", err)\r\n  }\r\n\r\n}\r\n\r\n    async function buytokens(type) {\r\n\r\n          const [account] = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n          const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n          const signer = provider.getSigner();\r\n          const contract = new ethers.Contract(nftContract, NFT.abi, signer);\r\n          let transaction;\r\n          try {\r\n            if(type === 5) {\r\n              transaction = await createLandStormsFunction(contract)\r\n               \r\n            } else if(type === 3) {\r\n              transaction = await createLandFireFunction(contract)\r\n              \r\n          } else if (type === 1) {\r\n             transaction = await createLandDesertFunction(contract);\r\n            \r\n        } else {\r\n          alert('Comportamiento malicioso: NO LO VUELVA A INTENTAR O SU CUENTA SE BLOQUEARA');\r\n          return;\r\n        }\r\n            // event capture\r\n            // contract.on(\"TokenPurchase\", (a, b, c, d) => {\r\n            //   let amountMATIC = ethers.utils.formatEther(c);\r\n            //  // console.log(`Comprador: ${b} precio: ${amountBNB} idtoken: ${d}`);\r\n            //   });\r\n\r\n            Swal.fire({\r\n              title: 'Procesando el pago',\r\n              text: 'Espere y no actualice el sitio',\r\n              showConfirmButton: false,\r\n              imageUrl: 'https://thumbs.gfycat.com/ConventionalOblongFairybluebird-size_restricted.gif',\r\n              imageWidth: 100,\r\n              imageHeight: 100,\r\n              imageAlt: 'Procesando el pago',\r\n  \r\n            });\r\n            \r\n            const Ok = await transaction.wait();\r\n            //console.log(`hash: ${transaction.hash}`);\r\n\r\n                  if(Ok) {\r\n                    Swal.fire({\r\n                    title:  `Se ha envíado un NFT a la cuenta ${account}`,\r\n                    html: `<a href=\"https://mumbai.polygonscan.com/tx/${transaction.hash}\" target=\"_blank\" rel=\"noreferrer\">Hash de la transaccion</a>`,\r\n                    icon: 'success',\r\n                    confirmButtonText: 'Cerrar'\r\n                  }).then((result) => {\r\n                    /* Read more about isConfirmed, isDenied below */\r\n                    if (result.isConfirmed) {\r\n                      init();\r\n                    } else if (result.isDenied) {\r\n                      init();\r\n                    }\r\n                  })\r\n          \r\n              };\r\n        \r\n      \r\n          }catch (err) {\r\n            let mensajeError = err.message;\r\n             \r\n            if (err.data) {\r\n  \r\n              if (err.data.message === 'execution reverted: Salemint must be active to buy Tokens') {\r\n                mensajeError =  'AUN NO SE PUEDE COMPRAR';\r\n              }  else if(err.data.message === 'execution reverted: value sent needs to be atleast sale price'){\r\n                mensajeError =  'Debe de pagar como mínimo el precio estipulado';\r\n              } else  if(err.data.message === 'execution reverted: You can have only one'){\r\n                mensajeError =  'Lo sentimos, solo se permite disponer de un NFT por cuenta';\r\n              } else {\r\n                console.log('error: ',mensajeError);\r\n              }\r\n            }\r\n\r\n\r\n              const swalWithBootstrapButtons = Swal.mixin({\r\n              customClass: {\r\n              confirmButton: 'btn btn-warning'\r\n              },\r\n              buttonsStyling: false\r\n              })\r\n  \r\n              swalWithBootstrapButtons.fire({\r\n              title: 'Ooops!',\r\n              text: `${mensajeError}`,\r\n              icon: 'error',\r\n              confirmButtonText: 'Cerrar'\r\n            })\r\n            console.log(\"Error: \", err)\r\n          }\r\n         \r\n    }\r\n\r\n\r\n  async function chainLink() {\r\n\r\nconst provider = new ethers.providers.Web3Provider(window.ethereum);\r\nconst addr = \"0x293E39a82b2417f2bD36cC8dc168de80c48508F2\";\r\nconst signer = provider.getSigner();\r\nconst contract = await new ethers.Contract(addr, ChainLInk.abi, signer);\r\n\r\ntry {          \r\n  const values = await contract.getLatestPrice();\r\n  const date = new Date(values[1].toString() * 1000);\r\n  const OneMatic = (ethers.utils.formatEther(values[0]) * 10000000000).toString();\r\n  console.log('value ', OneMatic, date.getHours());\r\n  document.querySelector('#priceMATIC').innerHTML = `Un MATIC: ${OneMatic} Dólares`;\r\n  document.querySelector('#lastOracle').innerHTML = `Ultima actualización ${date.getHours()} ${date.getMinutes()} horas`;\r\n} catch (err) {\r\n  let mensajeError = err.message;\r\n  console.log('message ', mensajeError);\r\n}\r\n\r\n\r\n  }\r\n\r\n  return (\r\n\r\n<div className=\"container-fluid\">\r\n        <div className=\"main row align-items-center g-lg-5 py-5\" style={{transform: `translateY(-${offSetY * 0.3}px)`}}>\r\n          <div className=\"my-4 col-lg-4 text-center text-lg-start\">\r\n            <form className=\"p-4 p-md-5 border rounded-3 transparent\">\r\n            <div className=\"form-floating mb-3\">\r\n            <h2 id=\"intro\" className=\"text-white\">No conectado</h2>\r\n            </div>\r\n            <hr className=\"my-4\"/>\r\n            <h3 id=\"tokens\" className=\"text-white\"></h3>\r\n            </form>\r\n          </div>\r\n          <div className=\"col-lg-4 text-center text-lg-start\">\r\n            <button id=\"btn-firma\"  onClick={() => init()} className=\"w-100 btn btn-lg btn-danger my-3\" type=\"button\">Conectar Metamask</button>\r\n            <button id=\"faucet\"  onClick={() => faucet()} className=\"w-100 btn btn-lg btn-primary my-3\" type=\"button\">Faucet de MATIC</button>\r\n            <button id=\"formBuyRare\" onClick={() => buytokens(1)} className=\"w-100 btn btn-lg btn-success my-3 d-none glow-on-hover btn-desert\" type=\"button\">Comprar Desert Land</button>\r\n            <button id=\"formBuyEpic\" onClick={() => buytokens(3)} className=\"w-100 btn btn-lg btn-info my-3 d-none glow-on-hover btn-fire\" type=\"button\">Comprar Land of Fire</button>\r\n            <button id=\"formBuyLegend\" onClick={() => buytokens(5)} className=\"w-100 btn btn-lg btn-warning my-3 d-none glow-on-hover btn-storms\" type=\"button\">Comprar Land of Storms</button>\r\n          </div>\r\n          <div id=\"oracle\" className=\"my-4 col-lg-4 text-center text-lg-start d-none\">\r\n            <form className=\"p-4 p-md-5 border rounded-3 transparent\">\r\n            <div className=\"form-floating mb-3\">\r\n            <h2 id=\"oracle\" className=\"text-white\">Oráculo de ChainLink</h2>\r\n            <button id=\"btn-firma\"  onClick={() => chainLink()} className=\"w-100 btn btn-lg btn-danger my-3\" type=\"button\">DOLLAR / MATIC</button>\r\n            </div>\r\n            <hr className=\"my-4\"/>\r\n            <p id=\"priceMATIC\" className=\"text-white\"></p>\r\n            <p id=\"lastOracle\" className=\"text-white\"></p>\r\n            <a className=\"text-white\" href=\"https://mumbai.polygonscan.com/address/0x293e39a82b2417f2bd36cc8dc168de80c48508f2#code\" target=\"_blank\">Oracle Contract</a>\r\n            </form>\r\n          </div>\r\n       \r\n        </div>\r\n        <div className=\"row align-items-center g-lg-5\"> \r\n            {\r\n          balance && // si hay balance se imprimiran los NFTs.\r\n              balance.map((idToken) => {\r\n                \r\n                return  <FetchCard idToken={idToken} />\r\n              }) \r\n \r\n            }\r\n        </div>\r\n\r\n              <img className=\"rounded mx-auto d-block\" src=\"./victory.png\" style={{width: `250px`}} />\r\n\r\n       \r\n    <VideoPlayer style={{transform: `translateY(${offSetY * 1}px)`}}\r\n        className=\"Video\"\r\n        src={\r\n          \"./video.mp4\"\r\n        }\r\n        autoPlay={true}\r\n        muted={true}\r\n        loop={true}\r\n      />\r\n</div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}